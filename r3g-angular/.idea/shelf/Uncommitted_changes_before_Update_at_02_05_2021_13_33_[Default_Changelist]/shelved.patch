Index: R3GAngular/src/app/module/exploration/exploration.component.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n.navbar-spacer{\r\n  width: 2%;\r\n}\r\n.bouton-menu{\r\n  width:100%;\r\n}\r\n.lien-container{\r\n  position: absolute;\r\n  margin-left: -200px;\r\n  bottom: 0;\r\n  left: 50%;\r\n}\r\n.ongletBDD{\r\n  width:100%;\r\n}\r\n.picker{\r\n\r\n}\r\napp-navigation-modules{\r\n  display:flex;\r\n  width:100%;\r\n  flex-direction: row;\r\n  position:fixed;\r\n  z-index: 1;\r\n  bottom:0;\r\n}\r\nmat-toolbar{\r\n  color:white;\r\n}\r\napp-visualitation-explo{\r\n  position: fixed;\r\n  z-index:1;\r\n  bottom: 0;\r\n  width: 100%;\r\n  color: #303030;\r\n}\r\n\r\n.spanchargement{\r\n  display:table;\r\n  margin:0 auto;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/R3GAngular/src/app/module/exploration/exploration.component.css b/R3GAngular/src/app/module/exploration/exploration.component.css
--- a/R3GAngular/src/app/module/exploration/exploration.component.css	(revision adf5e1f05dcd87755072481aab9e7204e3a4f5a7)
+++ b/R3GAngular/src/app/module/exploration/exploration.component.css	(date 1619953929076)
@@ -17,6 +17,11 @@
 .picker{
 
 }
+.spanchargement{
+  display:table;
+  margin:0 auto;
+}
+
 app-navigation-modules{
   display:flex;
   width:100%;
@@ -36,7 +41,3 @@
   color: #303030;
 }
 
-.spanchargement{
-  display:table;
-  margin:0 auto;
-}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"7284c3b8-889c-4c1e-a67c-6ed02237cd23\" name=\"Default Changelist\" comment=\"my workspace\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"TypeScript File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1mvfXJZYlAI4n95p5cjDAVH09qf\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/R3GAngular\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\r\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"nodejs_interpreter_path\" value=\"node\" />\r\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\r\n    <property name=\"run.code.analysis.last.selected.profile\" value=\"pProject Default\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"settings.typescriptcompiler\" />\r\n    <property name=\"ts.external.directory.path\" value=\"C:\\Program Files\\JetBrains\\WebStorm 2020.2.2\\plugins\\JavaScriptLanguage\\jsLanguageServicesImpl\\external\" />\r\n    <property name=\"vue.rearranger.settings.migration\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\lassa\\Documents\\Insa\\4A 2S\\projet\\r3g\\r3g-angular\\R3GAngular\\src\\app\\component\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"start\" type=\"js.build_tools.npm\" nameIsGenerated=\"true\">\r\n      <package-json value=\"$PROJECT_DIR$/R3GAngular/package.json\" />\r\n      <command value=\"start\" />\r\n      <node-interpreter value=\"wsl://Ubuntu-18.04@/usr/bin/node\" />\r\n      <envs />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"7284c3b8-889c-4c1e-a67c-6ed02237cd23\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1610379023748</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1610379023748</updated>\r\n      <workItem from=\"1610379024995\" duration=\"1640000\" />\r\n      <workItem from=\"1610529880277\" duration=\"654000\" />\r\n      <workItem from=\"1610530549054\" duration=\"2958000\" />\r\n      <workItem from=\"1610960966668\" duration=\"784000\" />\r\n      <workItem from=\"1614162352338\" duration=\"1092000\" />\r\n      <workItem from=\"1617125640380\" duration=\"25397000\" />\r\n      <workItem from=\"1617275947440\" duration=\"338000\" />\r\n      <workItem from=\"1617276381523\" duration=\"10980000\" />\r\n      <workItem from=\"1617368290273\" duration=\"10559000\" />\r\n      <workItem from=\"1618047770303\" duration=\"42000\" />\r\n      <workItem from=\"1618832300644\" duration=\"11905000\" />\r\n      <workItem from=\"1618917934567\" duration=\"614000\" />\r\n      <workItem from=\"1618918926297\" duration=\"16774000\" />\r\n      <workItem from=\"1618986091630\" duration=\"1703000\" />\r\n      <workItem from=\"1619073672022\" duration=\"14832000\" />\r\n      <workItem from=\"1619184783737\" duration=\"1857000\" />\r\n      <workItem from=\"1619428823121\" duration=\"19973000\" />\r\n      <workItem from=\"1619514433816\" duration=\"3100000\" />\r\n      <workItem from=\"1619676565354\" duration=\"21836000\" />\r\n      <workItem from=\"1619712463558\" duration=\"6108000\" />\r\n      <workItem from=\"1619764879294\" duration=\"22619000\" />\r\n      <workItem from=\"1619798136871\" duration=\"4269000\" />\r\n      <workItem from=\"1619868517045\" duration=\"7610000\" />\r\n      <workItem from=\"1619947865804\" duration=\"3502000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"add style\">\r\n      <created>1610379297694</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610379297694</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"add router\">\r\n      <created>1610533517742</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610533517742</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"start route menu\">\r\n      <created>1617204229403</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617204229403</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"continue menu\">\r\n      <created>1617212204237</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617212204237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"fixed\">\r\n      <created>1617212556250</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617212556250</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"closed bdd test\">\r\n      <created>1617266627298</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617266627298</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"add fonction localstorage\">\r\n      <created>1617289423097</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617289423097</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"bug detecter cache\">\r\n      <created>1617373337966</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617373337966</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"ajout téléchargement de sequence\">\r\n      <created>1617379422840</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617379422840</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"ajout téléchargement de sequence bis\">\r\n      <created>1617379476846</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617379476846</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"nothing special\">\r\n      <created>1618842291501</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1618842291501</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"nothing special\">\r\n      <created>1618919229790</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1618919229790</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"nothing special\">\r\n      <created>1618919340490</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1618919340490</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"nothing special\">\r\n      <created>1618926282852</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1618926282852</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"nothing special\">\r\n      <created>1618986737703</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1618986737703</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"retour vers exploration rapide\">\r\n      <created>1619095344009</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1619095344009</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"ajout Gesteliste\">\r\n      <created>1619184916518</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1619184916518</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"rework server\">\r\n      <created>1619191006691</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1619191006691</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"clean code 'espère na pas tout casser'\">\r\n      <created>1619450860548</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1619450860548</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"push server python sans print\">\r\n      <created>1619527123696</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1619527123696</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"my workspace\">\r\n      <created>1619880368297</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1619880368297</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"22\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"add style\" />\r\n    <MESSAGE value=\"add router\" />\r\n    <MESSAGE value=\"start route menu\" />\r\n    <MESSAGE value=\"continue menu\" />\r\n    <MESSAGE value=\"fixed\" />\r\n    <MESSAGE value=\"closed bdd test\" />\r\n    <MESSAGE value=\"add fonction localstorage\" />\r\n    <MESSAGE value=\"bug detecter cache\" />\r\n    <MESSAGE value=\"ajout téléchargement de sequence\" />\r\n    <MESSAGE value=\"ajout téléchargement de sequence bis\" />\r\n    <MESSAGE value=\"nothing special\" />\r\n    <MESSAGE value=\"retour vers exploration rapide\" />\r\n    <MESSAGE value=\"ajout Gesteliste\" />\r\n    <MESSAGE value=\"rework server\" />\r\n    <MESSAGE value=\"clean code 'espère na pas tout casser'\" />\r\n    <MESSAGE value=\"push server python sans print\" />\r\n    <MESSAGE value=\"my workspace\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"my workspace\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision adf5e1f05dcd87755072481aab9e7204e3a4f5a7)
+++ b/.idea/workspace.xml	(date 1619954749262)
@@ -22,7 +22,11 @@
     <select />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="7284c3b8-889c-4c1e-a67c-6ed02237cd23" name="Default Changelist" comment="my workspace" />
+    <list default="true" id="7284c3b8-889c-4c1e-a67c-6ed02237cd23" name="Default Changelist" comment="clean database">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/R3GAngular/src/app/module/exploration/exploration.component.css" beforeDir="false" afterPath="$PROJECT_DIR$/R3GAngular/src/app/module/exploration/exploration.component.css" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../r3g-flask/server.py" beforeDir="false" afterPath="$PROJECT_DIR$/../r3g-flask/server.py" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -37,7 +41,6 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
-    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="GitSEFilterConfiguration">
     <file-type-list>
@@ -269,7 +272,21 @@
       <option name="project" value="LOCAL" />
       <updated>1619880368297</updated>
     </task>
-    <option name="localTasksCounter" value="22" />
+    <task id="LOCAL-00022" summary="clean database">
+      <created>1619953828461</created>
+      <option name="number" value="00022" />
+      <option name="presentableId" value="LOCAL-00022" />
+      <option name="project" value="LOCAL" />
+      <updated>1619953828461</updated>
+    </task>
+    <task id="LOCAL-00023" summary="clean database">
+      <created>1619953879304</created>
+      <option name="number" value="00023" />
+      <option name="presentableId" value="LOCAL-00023" />
+      <option name="project" value="LOCAL" />
+      <updated>1619953879304</updated>
+    </task>
+    <option name="localTasksCounter" value="24" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -306,7 +323,8 @@
     <MESSAGE value="clean code 'espère na pas tout casser'" />
     <MESSAGE value="push server python sans print" />
     <MESSAGE value="my workspace" />
-    <option name="LAST_COMMIT_MESSAGE" value="my workspace" />
+    <MESSAGE value="clean database" />
+    <option name="LAST_COMMIT_MESSAGE" value="clean database" />
   </component>
   <component name="XSLT-Support.FileAssociations.UIState">
     <expand />
Index: ../r3g-flask/server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n# pylint: disable=E1101\r\n# pylint: disable=R0914\r\n# pylint: disable=R1702\r\n\"\"\"Programme permettant de faire tourner le serveur utilise par R3G.\"\"\"\r\n\r\nimport os\r\nimport json\r\nimport subprocess\r\nimport sys\r\nimport configparser\r\nimport ast\r\nimport tkinter.filedialog\r\nimport shutil\r\n\r\nfrom os import walk\r\nimport re\r\nimport xml.etree.ElementTree as ET\r\nfrom xml.etree.ElementTree import SubElement\r\nfrom xml.dom.minidom import parseString\r\nfrom shutil import copyfile\r\nfrom flask import Flask, request, flash, redirect\r\nimport wandb\r\nfrom werkzeug.utils import secure_filename\r\nimport matplotlib.cm as cm\r\nfrom Class.Hyperparameters import Hyperparameters\r\nfrom Class.Model import Model\r\nfrom Class.Annotation import Annotation\r\nfrom Class.Eval import Eval\r\nfrom Class.Poids import Poids\r\nfrom Model.ModelEarlyOC3D_3D import ModelEarlyOC3D_3D\r\n\r\n\r\nAPP = Flask(__name__)\r\nAPI = wandb.Api()\r\nRUNS = API.runs(\"precoce3d-OC3D\")\r\nMODEL_LIST = []\r\nCLASSES = []\r\nEVALUATION = []\r\nLISTE_PATH_BDD = {}\r\nLISTE_FICHIER_INKML = {}\r\nLISTE_GESTE_BDD = {}\r\nMETADONNEE = {}\r\nUPLOAD_FOLDER = './Upload'\r\nALLOWED_EXTENSIONS = {'txt', 'csv'}\r\nAPP.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\r\n\r\ndef allowed_file(filename):\r\n    \"\"\"On verifie que le format du fichier est dans ALLOWED_EXTENSIONS.\"\"\"\r\n    return '.' in filename and \\\r\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\r\n\r\n\r\ndef download_hyperparameters():\r\n    \"\"\"On telecharge tous les fichiers lies aux hyperparametres d'un model.\"\"\"\r\n    for run in RUNS:\r\n        if not os.path.exists(\"Hyperparameters/\" + run.id):\r\n            if run.state == 'finished' and run.tags.count('maxPoolBetLayers') > 0:\r\n                for files in run.files():\r\n                    if files.name == \"best_val_loss_epochs.txt\":\r\n                        files.download(\"Hyperparameters/\"+run.id, replace=True)\r\n\r\n\r\ndef download_weights(name):\r\n    \"\"\" Telechargement des poids d'un modele dont le nom est passe en parametre. 5 fichier a DL.\"\"\"\r\n    for run in RUNS:\r\n        if not os.path.exists(\"Weigths/\" + run.id):\r\n            if run.id == name:\r\n                for files in run.files():\r\n                    if files.name == \"weights/Weights/checkpoint\":\r\n                        files.download(\"Weigths/\"+run.id, replace=True)\r\n                    if files.name == \"weights/Weights/model.data-00000-of-00002\":\r\n                        files.download(\"Weigths/\"+run.id, replace=True)\r\n                    if files.name == \"weights/Weights/model.data-00001-of-00002\":\r\n                        files.download(\"Weigths/\"+run.id, replace=True)\r\n                    if files.name == \"weights/Weights/model.index\":\r\n                        files.download(\"Weigths/\"+run.id, replace=True)\r\n                    if files.name == 'weights/config.txt':\r\n                        files.download(\"Weigths/\"+run.id, replace=True)\r\n\r\n\r\n\r\ndef start_api_wandb():\r\n    \"\"\"Au lancement du serveur, on cree des objets de type Model contenant le nom l'id\r\n    et une liste d'hyperparametres pour chaque modeles present sur le board Wandb.\"\"\"\r\n    param = {}\r\n    for run in RUNS:\r\n        if run.state == 'finished' and run.tags.count('maxPoolBetLayers') > 0:\r\n            if os.path.exists(\"Hyperparameters/\" + run.id + \"/best_val_loss_epochs.txt\"):\r\n                param[run.id] = []\r\n                with open(\"Hyperparameters/\" + run.id + \"/best_val_loss_epochs.txt\", \"r\") as hyper:\r\n                    for line in hyper.readlines():\r\n                        if \"argv:\" in line:\r\n                            for elt in (line.replace(\"']\\n\", \"\").split(\":['\")[1]).split(\"', \"):\r\n                                param[run.id].append(Hyperparameters(elt.split(\"=\")[0], \\\r\n                                elt.split(\"=\")[1]).__dict__)\r\n                model = Model(run.id, run.name, param[run.id])\r\n                MODEL_LIST.append(model.__dict__)\r\n\r\n\r\ndef start_wandb_v2():\r\n    \"\"\"v2 pour l'autre depot\"\"\"\r\n    param = {}\r\n    for run in RUNS:\r\n        param[run.id] = []\r\n        model = Model(run.id, run.name, param[run.id])\r\n        MODEL_LIST.append(model.__dict__)\r\n\r\n\r\ndef get_class_geste(name):\r\n    \"\"\" on recup le contenu de tab_class.txt \"\"\"\r\n    if os.path.exists('./'+name+'/Actions.csv'):\r\n        with open('./'+name+'/Actions.csv') as file_content:\r\n            for line in file_content:\r\n                CLASSES.append(line.split(';')[1].replace('\\n', ''))\r\n\r\n\r\ndef delete_eval():\r\n    \"\"\"supression des anciennes eval \"\"\"\r\n    if not os.path.exists('./EvaluationSequences'):\r\n        os.mkdir('./EvaluationSequences')\r\n    for fichier in os.listdir('./EvaluationSequences'):\r\n        if os.path.exists('./EvaluationSequences/'+fichier):\r\n            os.remove('./EvaluationSequences/'+fichier)\r\n\r\ndef load_config(path_model) -> dict:\r\n    # pylint: disable-msg=eval-used\r\n    \"\"\" recup de fichier de config \"\"\"\r\n    with open(path_model + \"config.txt\", \"r\") as finfo:\r\n        infos = eval(\"\\n\".join(finfo.readlines()))\r\n        finfo.close()\r\n    return infos\r\n\r\n\r\n@APP.route('/models/getGesteZero/<name_bdd>')\r\ndef get_geste_zero(name_bdd):\r\n    \"\"\" on recup le geste identifié par 0 dans la bdd\"\"\"\r\n    if os.path.exists('./'+name_bdd+'/Actions.csv'):\r\n        with open('./'+name_bdd+'/Actions.csv') as file_content:\r\n            for line in file_content:\r\n                if line.split(';')[0] == '0':\r\n                    return json.dumps(line.split(';')[1].replace('\\n', ''))\r\n    return json.dumps({'success':False}), 500, {'ContentType':'application/json'}\r\n\r\n@APP.route('/models/getPoids/<id_model>')\r\ndef get_poids(id_model):\r\n    # pylint: disable=E1101\r\n    \"\"\" a utiliser avec tensorflow pour recup les poids du model \"\"\"\r\n    cmap = cm.jet\r\n    path_model = \"Weigths/\"+id_model+'/weights/'\r\n    download_weights(id_model)\r\n    config = load_config(path_model)\r\n    model = ModelEarlyOC3D_3D(nbClass=config[\"nbClass\"], boxSize=config[\"boxSize\"],\r\n                          doGLU=config[\"doGlu\"], dropoutVal=config[\"dropoutVal\"],\r\n                          denseNeurones=config[\"denseSize\"],\r\n                          denseDropout=config[\"denseDropout\"], nbFeatureMap=config[\"nbFeatureMap\"],\r\n                          dilatationsRates=config[\"dilatationRates\"],\r\n                          maxPoolSpatial=config[\"maxPoolSpatial\"],\r\n                          poolSize=config[\"poolSize\"], poolStrides=config[\"poolSize\"])\r\n    model.load_weights(path_model + \"Weights/model\")\r\n    model.build((None,None,config[\"boxSize\"][0],config[\"boxSize\"][1],config[\"boxSize\"][2]))\r\n    llist = []\r\n    for elt in model.layersConv:\r\n        name = elt.name\r\n        biais = elt.get_weights()[1].tolist()\r\n        outgoing_channels = len(biais)\r\n        for i in range(outgoing_channels):\r\n            filtre = elt.get_weights()[0]\r\n            filtre = filtre[:, :, :, :, i]\r\n            filtre = cmap(filtre)*255\r\n            filtre = filtre.tolist()\r\n            llist.append(Poids(name, filtre, biais, i).__dict__)\r\n    return json.dumps(llist)\r\n\r\n\r\n@APP.route('/models/getModelsNames')\r\ndef get_models_names():\r\n    \"\"\"Cette route permet de recuperer la liste des modeles disponible sur Wandb.\"\"\"\r\n    return json.dumps(MODEL_LIST)\r\n\r\n\r\n@APP.route('/models/getModel/<id>')\r\ndef get_model(model_id):\r\n    \"\"\"Cette route permet de recuperer un modele en donnant son id en parametre\"\"\"\r\n    for elt in MODEL_LIST:\r\n        if elt[\"_id\"] == model_id:\r\n            return json.dumps(elt)\r\n    return json.dumps({'success':False}), 500, {'ContentType':'application/json'}\r\n\r\n\r\n#Cette route permet d'uploader un fichier choisi depuis le front-end sur le serveur.\r\n#contenant les hyperparametres, et le fichier texte contenant les sequences.\r\n# On va utiliser ces 2 fichiers pour lancer un apprentissage\r\n@APP.route('/models/uploadFile/<name>', methods=['GET', 'POST'])\r\ndef upload_file(name):\r\n    \"\"\"Permet de telecharger un fichier depuis le front end.\"\"\"\r\n    if request.method == 'POST':\r\n        # check if the post request has the file part\r\n        if 'file' not in request.files:\r\n            flash('No file part')\r\n            return redirect(request.url)\r\n        file = request.files['file']\r\n        # if user does not select file, browser also\r\n        # submit an empty part without filename\r\n        if file.filename == '':\r\n            flash('No selected file')\r\n            return redirect(request.url)\r\n        if file and allowed_file(file.filename):\r\n            filename = secure_filename(file.filename)\r\n            if not os.path.exists('./Upload/'+name):\r\n                os.mkdir('./Upload/'+name)\r\n            APP.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER+'/'+name\r\n            file.save(os.path.join(APP.config['UPLOAD_FOLDER'], filename))\r\n            return json.dumps({'success':True}), 200, {'ContentType':'application/json'}\r\n    return json.dumps({'success':False}), 500, {'ContentType':'application/json'}\r\n\r\n\r\n@APP.route('/models/evaluation/<name>/<sequences>/<model>')\r\ndef evaluation(name, sequences, model):\r\n    \"\"\" on fait l'evaluation de sequences avec le model passé en param\"\"\"\r\n    download_weights(model)\r\n    get_class_geste(name)\r\n    seq = sequences.split(',')\r\n    if len(CLASSES) == 0:\r\n        return json.dumps({'success':False}), 500, {'ContentType':'application/json'}\r\n\r\n   # remise à zéro des séquences à évaluer\r\n    for fichier in os.listdir('./Sequences'):\r\n        if os.path.exists('./Sequences/'+fichier):\r\n            os.remove('./Sequences/'+fichier)\r\n\r\n\r\n    # run SequenceEvaluator.py pour évaluer\r\n    file_to_convert = {}\r\n    for iid,elt in enumerate(seq):\r\n        if not os.path.exists('./' + name + '/Data/' + elt.replace('inkml','txt')):\r\n            file_to_convert[iid]='./' + name + '/Inkml/' + elt\r\n\r\n    write_data(file_to_convert, './' + name)\r\n\r\n    for elt in seq:\r\n        copyfile('./' + name + '/Data/' + elt.replace('.inkml', '') + '.txt', './Sequences/' + \\\r\n        elt.replace('.inkml', '') + '.txt')\r\n\r\n    subprocess.call([sys.executable, \"SequenceEvaluator.py\", \"Sequences/\", \"EvaluationSequences/\"\\\r\n    + model, \"Weigths/\"+model+'/weights/'])\r\n\r\n\r\n    for file in os.listdir('./EvaluationSequences/'):\r\n        liste_annotation = []\r\n        with open('./EvaluationSequences/' + file) as file_content:\r\n            for line in file_content:\r\n                tab = line.split(',')\r\n                id_geste = int(tab[0])\r\n                debut = int(tab[1])\r\n                fin = int(tab[2])\r\n                annotation = Annotation(debut, fin, 0, CLASSES[id_geste])\r\n                liste_annotation.append(annotation.__dict__)\r\n        EVALUATION.append(Eval(file.replace('txt', 'inkml').replace(model, ''),\\\r\n        liste_annotation, model).__dict__)\r\n\r\n    return json.dumps(EVALUATION)\r\n\r\n\r\n@APP.route('/models/startLearning/<name>')\r\ndef start_learning(name):\r\n    \"\"\"Permet de lancer l'apprentissage d'un model en runnant un script shell\"\"\"\r\n    path = \"\"\r\n    sequences = \"\"\r\n    csv = \"\"\r\n    if os.path.exists('./Upload/' + name):\r\n        for file in os.listdir(\"./Upload/\" + name):\r\n            if file == 'sequences.txt':\r\n                sequences = \"./Upload/\" + name + '/' + file\r\n            if file == 'ia.txt':\r\n                with open(\"./Upload/\" + name + '/' + file) as file_content:\r\n                    path = file_content.readlines()[0]\r\n            if file not in ('sequences.txt', 'ia.txt'):\r\n                csv = \"./Upload/\" + name + '/' + file\r\n        if os.path.isfile(path):\r\n            subprocess.call([sys.executable, path, sequences, csv])\r\n        else:\r\n            return json.dumps({'success': False}), 500, {'ContentType': 'application/json'}\r\n\r\n    return json.dumps({'success':True}), 200, {'ContentType':'application/json'}\r\n\r\n\r\n@APP.route('/models/getDonneeVoxel/<bdd>/<namefichier>')\r\ndef route_get_donnee_voxel(bdd, namefichier):\r\n    \"\"\"Permet de télécharger donnée a partir du nom de fichier \"\"\"\r\n    if bdd in LISTE_PATH_BDD:\r\n        if namefichier in LISTE_FICHIER_INKML[bdd]:\r\n            filepath = (LISTE_PATH_BDD[bdd]+ '/' + 'Voxelized/' +\r\n                        namefichier.split('/')[len(namefichier.split('/'))-1][:-5] + 'txt')\r\n            if os.path.isfile(filepath):\r\n                with open(filepath, 'r') as file:\r\n                    lines = file.readlines()\r\n                    dim = list(map(int, lines[0].split(',')))\r\n                    print(dim)\r\n                    boxes = []\r\n                    for xit in range(1, len(lines), dim[1]*dim[0]):\r\n                        list3d = []\r\n                        for yit in range(0, dim[1]*dim[0], dim[1]):\r\n                            list2d = []\r\n                            for zit in range(0, dim[1], 1):\r\n                                list2d.append(list(map(int, lines[xit+yit+zit].split(','))))\r\n                            list3d.append(list2d)\r\n                        boxes.append(list3d)\r\n                    file.close()\r\n                return json.dumps(boxes)\r\n    return json.dumps('Failed')\r\n\r\n#############Annotation route :##############\r\n@APP.route('/models/saveAnnot/<bdd>/<namefichier>/<annotationsstr>')\r\ndef route_save_annot(bdd, namefichier,annotationsstr):\r\n    # pylint: disable-msg=too-many-branches\r\n    \"\"\"Permet de sauvegarder les annotations de cette sequence\"\"\"\r\n    annotations = json.loads(annotationsstr)\r\n    print(annotations[0])\r\n    listsuprimer = []\r\n    if bdd in LISTE_PATH_BDD:\r\n        if namefichier in LISTE_FICHIER_INKML[bdd]:\r\n            filepath = LISTE_PATH_BDD[bdd]+ '/Inkml/' + namefichier\r\n            ET.register_namespace('', \"http://www.w3.org/2003/InkML\")\r\n            tree = ET.parse(filepath)\r\n            root = tree.getroot()\r\n            for child in root:\r\n                if child.tag == \"{http://www.w3.org/2003/InkML}unit\":\r\n                    for children2 in child:\r\n                        print(children2)\r\n                        if children2.tag == \"{http://www.w3.org/2003/InkML}annotationXML\":\r\n                            if children2.attrib == {'type': 'actions'}:\r\n                                listsuprimer.append(children2)\r\n            print(listsuprimer)\r\n            for child in root:\r\n                if child.tag == \"{http://www.w3.org/2003/InkML}unit\":\r\n                    for elem in listsuprimer:\r\n                        child.remove(elem)\r\n            for child in root:\r\n                if child.tag == \"{http://www.w3.org/2003/InkML}unit\":\r\n                    for annot in annotations:\r\n                        print(\"hello\")\r\n                        annotation_xml = SubElement(child, 'annotationXML')\r\n                        annotation_xml.set('type', 'actions')\r\n                        annotation = SubElement(annotation_xml, 'annotation')\r\n                        annotation.set('type', 'type')\r\n                        annotation.text = annot['classeGeste']\r\n                        annotation = SubElement(annotation_xml, 'annotation')\r\n                        annotation.set('type', 'start')\r\n                        annotation.text = str(annot['f1'])\r\n                        annotation = SubElement(annotation_xml, 'annotation')\r\n                        annotation.set('type', 'end')\r\n                        annotation.text = str(annot['f2'])\r\n                        if annot['pointAction'] != 0:\r\n                            annotation = SubElement(annotation_xml, 'annotation')\r\n                            annotation.set('type', 'pointAction')\r\n                            annotation.text = str(annot['pointAction'])\r\n            _pretty_print(root)\r\n            tree = ET.ElementTree(root)\r\n            tree.write(filepath, encoding=\"UTF-8\", xml_declaration=True)\r\n            tree = ET.ElementTree(root)\r\n            return json.dumps('saved')\r\n    return None\r\n\r\ndef _pretty_print(current, parent=None, index=-1, depth=0):\r\n    for i, node in enumerate(current):\r\n        _pretty_print(node, current, i, depth + 1)\r\n    if parent is not None:\r\n        if index == 0:\r\n            parent.text = '\\n' + ('\\t' * depth)\r\n        else:\r\n            parent[index - 1].tail = '\\n' + ('\\t' * depth)\r\n        if index == len(parent) - 1:\r\n            current.tail = '\\n' + ('\\t' * (depth - 1))\r\n#############Exploration methode##############\r\n\r\ndef get_last_config():\r\n    \"\"\"lire les dernière variables enregistrer pour recharger\r\n    la même configuration si un fichier Config_Server existe\"\"\"\r\n     # lecture du fichier\r\n    global LISTE_PATH_BDD\r\n    global LISTE_FICHIER_INKML\r\n    global METADONNEE\r\n    global LISTE_GESTE_BDD\r\n\r\n    fcfg = 'config.ini'\r\n    cfg = configparser.ConfigParser()\r\n\r\n    if len(cfg.read(fcfg)) == 1:\r\n\r\n        # lecture des valeurs\r\n        LISTE_PATH_BDD = ast.literal_eval(cfg['server']['LISTE_PATH_BDD'])\r\n        LISTE_FICHIER_INKML = ast.literal_eval(cfg['server']['LISTE_FICHIER_INKML'])\r\n        LISTE_GESTE_BDD = ast.literal_eval(cfg['server']['LISTE_GESTE_BDD'])\r\n        METADONNEE = ast.literal_eval(cfg['server']['METADONNEE'])\r\n\r\ndef save_config():\r\n    \"\"\"sauvegarde des dernieres valeurs lues\"\"\"\r\n    fcfg = 'config.ini'\r\n    cfg = configparser.ConfigParser()\r\n    # modification des valeurs\r\n    cfg['server'] = {'LISTE_PATH_BDD': str(LISTE_PATH_BDD),\r\n                     'LISTE_FICHIER_INKML': str(LISTE_FICHIER_INKML),\r\n                     'LISTE_GESTE_BDD': str(LISTE_GESTE_BDD),\r\n                     'METADONNEE': str(METADONNEE)}\r\n    # écriture du fichier modifié\r\n    with open(fcfg, 'w') as file:\r\n        cfg.write(file)\r\n\r\ndef ajout_fichiers_inkml_in(pathbdd, namebdd):\r\n    \"\"\"On ajoute les fichiers de présent à ce path BDD.\"\"\"\r\n    # pylint: disable-msg=global-statement\r\n    p_1 = re.compile(r'.*[.](?=inkml$)[^.]*$')\r\n    liste_fichier_in = {}\r\n    longeur_path = len(pathbdd)\r\n    global METADONNEE\r\n    global LISTE_GESTE_BDD\r\n    for path, _, files in walk(pathbdd):\r\n        for filename in files:\r\n            if p_1.match(filename):\r\n                liste_fichier_in[filename] = path[longeur_path:]+'/'+filename\r\n    if len(liste_fichier_in) != 0:\r\n        LISTE_GESTE_BDD[namebdd] = []\r\n        LISTE_FICHIER_INKML[namebdd] = liste_fichier_in\r\n        metadonnes = []\r\n        for file in liste_fichier_in:\r\n            metadonnes.append(get_meta_donnee(file, namebdd))\r\n        METADONNEE[namebdd] = metadonnes\r\n        return True\r\n    return False\r\n\r\ndef fermer_bdd_inkml(bdd):\r\n    \"\"\"ferme une bdd \"\"\"\r\n    global METADONNEE\r\n    global LISTE_FICHIER_INKML\r\n    global LISTE_GESTE_BDD\r\n    global LISTE_PATH_BDD\r\n    del LISTE_PATH_BDD[bdd]\r\n    del METADONNEE[bdd]\r\n    del LISTE_FICHIER_INKML[bdd]\r\n    del LISTE_GESTE_BDD[bdd]\r\n\r\ndef effacer_metadonnee_bdd(bdd):\r\n    \"\"\"ferme une bdd \"\"\"\r\n    global METADONNEE\r\n    global LISTE_FICHIER_INKML\r\n    global LISTE_GESTE_BDD\r\n    del METADONNEE[bdd]\r\n    del LISTE_FICHIER_INKML[bdd]\r\n    del LISTE_GESTE_BDD[bdd]\r\n\r\ndef get_meta_donnee(filename, bdd):\r\n    # pylint: disable-msg=too-many-locals\r\n    # pylint: disable-msg=too-many-branches\r\n    # pylint: disable-msg=too-many-nested-blocks\r\n    \"\"\"Contenu du fichier inkml.\"\"\"\r\n    global LISTE_GESTE_BDD\r\n    filepath = LISTE_PATH_BDD[bdd] + LISTE_FICHIER_INKML[bdd][filename]\r\n    name = filename\r\n    format_donnee = {}\r\n    annotations = {}\r\n    directives = []\r\n    others = {}\r\n    tree = ET.parse(filepath)\r\n    root = tree.getroot()\r\n    nb_annotation = 0\r\n    nb_others = 0\r\n    for child in root:\r\n        if child.tag == \"{http://www.w3.org/2003/InkML}traceFormat\":\r\n            for children in child:\r\n                format_donnee[children.attrib['name']] = children.attrib['type']\r\n        elif child.tag == \"{http://www.w3.org/2003/InkML}unit\":\r\n            for children2 in child:\r\n                if children2.tag == \"{http://www.w3.org/2003/InkML}annotationXML\":\r\n                    if children2.attrib == {'type': 'actions'}:\r\n                        action = {}\r\n                        nb_annotation += 1\r\n                        for children in children2:\r\n                            action[children.attrib['type']] = children.text\r\n                            if(children.attrib['type'] == \"type\" and children.text \\\r\n                            not in LISTE_GESTE_BDD[bdd]):\r\n                                LISTE_GESTE_BDD[bdd].append(children.text)\r\n                        annotations[nb_annotation] = action\r\n        elif child.tag == \"{http://www.w3.org/2003/InkML}annotationXML\":\r\n            ##récupere les annotations non implÃ©menter(autres que capteur,user,action)\r\n            if child.attrib == {'type': 'directive'}:\r\n                for children2 in child:\r\n                    if (children2.tag == \"{http://www.w3.org/2003/InkML}annotation\" and\r\n                            children2.attrib == {'type': 'gesture'}):\r\n                        directives.append(children2.text)\r\n            else:\r\n                other = {}\r\n                nb_others += 1\r\n                for children in child:\r\n                    other[children.attrib['type']] = children.text\r\n                others[child.attrib['type']] = other\r\n        elif child.tag == \"{http://www.w3.org/2003/InkML}traceGroup\":\r\n            break\r\n    metadonnee = {\"id\": name, \"BDD\": bdd, \"format\": format_donnee,\r\n                  \"annotation\": annotations, \"directives\": directives, \"metadonnees\": others}\r\n    return metadonnee\r\n\r\ndef get_donnee(filename, bdd):\r\n    \"\"\"Contenu du fichier inkml.\"\"\"\r\n    filepath = LISTE_FICHIER_INKML[bdd][filename]\r\n    donnees = []\r\n    tree = ET.parse(LISTE_PATH_BDD[bdd]+ '/' + filepath)\r\n    root = tree.getroot()\r\n    for child in root:\r\n        if child.tag == \"{http://www.w3.org/2003/InkML}traceGroup\":\r\n            for children in child:\r\n                if children.tag == \"{http://www.w3.org/2003/InkML}trace\":\r\n                    dict_final = []\r\n                    dict_1 = children.text.split(\", \")\r\n                    for point in dict_1:\r\n                        tab_2 = point.split(\" \")\r\n                        dict_final.append(tab_2)\r\n                    donnees.append(dict_final)\r\n    return donnees\r\n\r\ndef add_listgeste_metadonne():\r\n    \"\"\"Construit la structure a envoyer au serveur contenant\r\n    et les liste de geste par bdd et les Metadonnee\"\"\"\r\n    return [LISTE_GESTE_BDD, METADONNEE]\r\n\r\ndef add_listgeste_metadonnee_one(name):\r\n    \"\"\"Construit la structure a envoyer au serveur contenant\r\n    et les liste de geste pour une bdd et ses Metadonnee\"\"\"\r\n    return [LISTE_GESTE_BDD[name], METADONNEE[name]]\r\n\r\ndef add_listgeste_metadonnee_one_and_name(name):\r\n    \"\"\"Construit la structure a envoyer au serveur contenant\r\n    et les liste de geste pour une bdd et ses Metadonnee\"\"\"\r\n    return [name, LISTE_GESTE_BDD[name], METADONNEE[name]]\r\n#############Exploration route :##############\r\n\r\n@APP.route('/models/getMetaDonnee')\r\ndef route_get_meta_donne():\r\n    \"\"\"Permet de télécharger l'ensemble des méta_donnée\"\"\"\r\n\r\n    return json.dumps(add_listgeste_metadonne())\r\n\r\n@APP.route('/models/getListBDD')\r\ndef route_get_list_bdd():\r\n    \"\"\"Permet de télécharger la liste des BDD\"\"\"\r\n    return json.dumps(list(LISTE_PATH_BDD.keys()))\r\n\r\n#cette route permet de recuperer les données normalisées du fichier namefichier\r\n@APP.route('/models/getDonnee/<bdd>/<namefichier>')\r\ndef route_get_sequence(bdd, namefichier):\r\n    \"\"\"Permet de télécharger donnée a partir du nom de fichier \"\"\"\r\n    if bdd in LISTE_PATH_BDD:\r\n        if namefichier in LISTE_FICHIER_INKML[bdd]:\r\n            return json.dumps(get_donnee(namefichier, bdd))\r\n    return None\r\n\r\n\r\n@APP.route('/models/addBDD')\r\ndef route_add_bdd():\r\n    \"\"\"add new path ddb\"\"\"\r\n    global LISTE_PATH_BDD\r\n    global LISTE_GESTE_BDD\r\n    root = tkinter.Tk()\r\n    root.withdraw()\r\n    top = tkinter.Toplevel(root)\r\n    top.withdraw()\r\n    root.update()\r\n    top.update()\r\n    try:\r\n        path = tkinter.filedialog.askdirectory(mustexist=True)\r\n        #Permet de télécharger donnée a partir du nom de fichier\r\n        if path != \"\":\r\n            p_2 = re.compile(r'[^/]*$')\r\n            namebdd = p_2.search(path)\r\n            if namebdd is not None:\r\n                namebdd = namebdd.group(0)\r\n                if namebdd not in LISTE_PATH_BDD:\r\n                    LISTE_GESTE_BDD[namebdd] = []\r\n                    LISTE_PATH_BDD[namebdd] = path\r\n                    if ajout_fichiers_inkml_in(path, namebdd):\r\n                        save_config()\r\n                    else:\r\n                        del LISTE_GESTE_BDD[namebdd]\r\n                        del LISTE_PATH_BDD[namebdd]\r\n        root.destroy()\r\n        return json.dumps(add_listgeste_metadonnee_one_and_name(namebdd))\r\n    except RuntimeError:\r\n        root.destroy()\r\n        return json.dumps(\"Erreur\")\r\n\r\n@APP.route('/models/addBDDwithpath/<path>')\r\ndef route_add_bdd_path(path):\r\n    \"\"\"add new path ddb\"\"\"\r\n    global LISTE_PATH_BDD\r\n    global LISTE_GESTE_BDD\r\n    strpath = \"\"\r\n    for char in path.split(','):\r\n        strpath += chr(int(char))\r\n    if strpath != \"\":\r\n        p_2 = re.compile(r'[^/]*$')\r\n        namebdd = p_2.search(strpath)\r\n        if namebdd is not None:\r\n            namebdd = namebdd.group(0)\r\n            if namebdd not in LISTE_PATH_BDD:\r\n                LISTE_GESTE_BDD[namebdd] = []\r\n                LISTE_PATH_BDD[namebdd] = strpath\r\n                if ajout_fichiers_inkml_in(strpath, namebdd):\r\n                    save_config()\r\n                else:\r\n                    del LISTE_GESTE_BDD[namebdd]\r\n                    del LISTE_PATH_BDD[namebdd]\r\n    return json.dumps(add_listgeste_metadonnee_one_and_name(namebdd))\r\n\r\n\r\n@APP.route('/models/closeBDD/<name>')\r\ndef route_close_bdd(name):\r\n    \"\"\"Permet de fermer une base donnée\"\"\"\r\n    global LISTE_PATH_BDD\r\n    p_2 = re.compile(r'[^/]*$')\r\n    namebdd = p_2.search(name)\r\n    if namebdd is not None:\r\n        namebdd = namebdd.group(0)\r\n        if namebdd in LISTE_PATH_BDD:\r\n            fermer_bdd_inkml(namebdd)\r\n            save_config()\r\n            return json.dumps(\"Bdd well deleted\")\r\n    return json.dumps(\"Bdd doesn't exist\")\r\n\r\n@APP.route('/models/reload/<name>')\r\ndef route_reload_bdd(name):\r\n    \"\"\"Permet de télécharger donnée a partir du nom de fichier \"\"\"\r\n    global LISTE_FICHIER_INKML\r\n    global METADONNEE\r\n    if name in LISTE_PATH_BDD:\r\n        effacer_metadonnee_bdd(name)\r\n        ajout_fichiers_inkml_in(LISTE_PATH_BDD[name], name)\r\n    save_config()\r\n    return json.dumps(add_listgeste_metadonnee_one(name))\r\n\r\n#############Route CREER Base de Donnée inkml depuis txt :##############\r\n\r\n@APP.route('/models/txtToInkml/<labels_path_dossier>'+\r\n           '/<data_path_dossier>/<inkml_path_dossier>/<fps>/<path_class>')\r\ndef route_add_bdd_path_txt(labels_path_dossier, data_path_dossier,\r\n                           inkml_path_dossier, fps, path_class):\r\n    \"\"\"add new path ddb and translate it to inkml\"\"\"\r\n    path_class_tr = \"\"\r\n    for char in path_class.split(','):\r\n        path_class_tr += chr(int(char))\r\n    data_path_dossier_tr = \"\"\r\n    for char in data_path_dossier.split(','):\r\n        data_path_dossier_tr += chr(int(char))\r\n    labels_path_dossier_tr = \"\"\r\n    for char in labels_path_dossier.split(','):\r\n        labels_path_dossier_tr += chr(int(char))\r\n    inkml_path_dossier_tr = \"\"\r\n    for char in inkml_path_dossier.split(','):\r\n        inkml_path_dossier_tr += chr(int(char))\r\n    fps_tr = int(fps)\r\n    path_class_tr = os.path.join(path_class_tr, 'Actions.csv')\r\n\r\n    tab_class = read_class(path_class_tr)\r\n    liste_data = rechercher_fichier_data(data_path_dossier_tr)\r\n    liste_label = rechercher_fichier_label(labels_path_dossier_tr)\r\n    copy_file_tabclass_to_inkml(inkml_path_dossier_tr, path_class_tr)\r\n    generate_database(liste_data, liste_label, tab_class, inkml_path_dossier_tr, fps_tr)\r\n    return json.dumps(\"worked\")\r\n#############fonction BDD TXT vers INKML##############\r\ndef generate_template():\r\n    \"\"\"On genere un template\"\"\"\r\n    root = ET.Element('ink', {\"xmlns\":\"http://www.w3.org/2003/InkML\"})\r\n    trace_format = SubElement(root, 'traceFormat')\r\n    SubElement(trace_format, 'channel', {\"name\":\"x\", \"type\":\"Decimal\"})\r\n    SubElement(trace_format, 'channel', {\"name\":\"y\", \"type\":\"Decimal\"})\r\n    SubElement(trace_format, 'channel', {\"name\":\"z\", \"type\":\"Decimal\"})\r\n    SubElement(trace_format, 'channel', {\"name\":\"timestamp\", \"type\":\"Decimal\"})\r\n    return ET.ElementTree(root)\r\n\r\ndef add_labels(inkmltree, labels, dictclass):\r\n    \"\"\"on ajoute les annotations a l'arbre passe en param\"\"\"\r\n    root = inkmltree.getroot()\r\n    with open(labels, 'r') as filelabels:\r\n        unit = SubElement(root, 'unit')\r\n        for line in filelabels:\r\n            label = line[:-1].split(',')\r\n            annotation_xml = SubElement(unit, 'annotationXML')\r\n            annotation_xml.set('type', 'actions')\r\n            annotation = SubElement(annotation_xml, 'annotation')\r\n            annotation.set('type', 'type')\r\n            annotation.text = dictclass[label[0]]\r\n            annotation = SubElement(annotation_xml, 'annotation')\r\n            annotation.set('type', 'start')\r\n            annotation.text = label[1]\r\n            annotation = SubElement(annotation_xml, 'annotation')\r\n            annotation.set('type', 'end')\r\n            annotation.text = label[2]\r\n        filelabels.close()\r\n\r\ndef add_data(inkmltree, data, fps):\r\n    \"\"\"ajout des donnees a l'arbre inkml\"\"\"\r\n    root = inkmltree.getroot()\r\n    with open(data, 'r') as filedata:\r\n        timestamp = 0\r\n        traces = {}\r\n        tracegroup = SubElement(root, 'traceGroup')\r\n        for line in filedata:\r\n            positions = line[:-1].split(' ')\r\n            for i in range(int(len(positions) / 3)):\r\n                traces.setdefault(str(i), [])\r\n                traces[str(i)] += [[positions[3 * i],\r\n                                    positions[3 * i + 1], positions[3 * i + 2],\r\n                                    str(timestamp)]]\r\n            timestamp += 1 / fps\r\n        for articulation in traces:\r\n            trace = SubElement(tracegroup, 'trace')\r\n            trace.text = ''\r\n            for tab in traces[articulation]:\r\n                for elem in tab:\r\n                    trace.text = str(trace.text) + str(elem) + ' '\r\n                trace.text = trace.text[:-1] + ', '\r\n            trace.text = trace.text[:-2]\r\n        filedata.close()\r\n\r\ndef read_class(pathclass):\r\n    \"\"\"lecture tableau correspondance de classe\"\"\"\r\n    dictclass = {}\r\n    with open(pathclass, 'r') as fileclass:\r\n        for line in fileclass:\r\n            line = line.replace('\\n', '')\r\n            tabtemp = line.split(';')\r\n            dictclass[tabtemp[0]] = tabtemp[1]\r\n        fileclass.close()\r\n    return dictclass\r\n\r\ndef generatefile_inkml(data, label, tableau_classe, inkml_file, fps):\r\n    \"\"\"construit le fichier inkml\"\"\"\r\n    inkml_tree = generate_template()\r\n    add_labels(inkml_tree, label, tableau_classe)\r\n    add_data(inkml_tree, data, fps)\r\n#    inkml_tree.write(inkml_file, encoding=\"UTF-8\", xml_declaration=True)\r\n# utile seulement si inkml pas indenté\r\n    with open(inkml_file, \"r\") as file:\r\n        parser = parseString(file.read())\r\n        file.close()\r\n    with open(inkml_file, \"w\") as file:\r\n        file.write(parser.toprettyxml())\r\n        file.close()\r\n\r\ndef rechercher_fichier_data(path_dossier_data):\r\n    \"\"\"recherche dans le repertoir des fichier contenant de la data\"\"\"\r\n    liste_fichier_data = {}\r\n    p_1 = re.compile(r'.*[.](?=txt$)[^.]*$')\r\n    for path, _, files in walk(path_dossier_data):\r\n        for filename in files:\r\n            if p_1.match(filename):\r\n                liste_fichier_data[filename] = path+'/'+filename\r\n    return liste_fichier_data\r\n\r\ndef rechercher_fichier_label(path_dossier_label):\r\n    \"\"\"recherche du fichier label\"\"\"\r\n    liste_fichier_label = {}\r\n    p_1 = re.compile(r'.*[.](?=txt$)[^.]*$')\r\n    for path, _, files in walk(path_dossier_label):\r\n        for filename in files:\r\n            if p_1.match(filename):\r\n                liste_fichier_label[filename] = path+'/'+filename\r\n    return liste_fichier_label\r\n\r\ndef generate_database(liste_data, liste_label, tableau_classe, inkml_path_dossier, fps):\r\n    \"\"\"construit l'ensemble de la base de donnée inkml\"\"\"\r\n    os.makedirs(os.path.join(inkml_path_dossier, 'Inkml'), exist_ok=True)\r\n    for file_data in liste_data:\r\n        generatefile_inkml(liste_data[file_data], liste_label[file_data], tableau_classe,\r\n                        inkml_path_dossier + \"/Inkml/\" + file_data[:-3] + \"inkml\", fps)\r\n\r\ndef copy_file_tabclass_to_inkml(inkml_path_dossier, path_class):\r\n    \"\"\"copier et renommer le fichier tabclass\"\"\"\r\n    path_dossier_class = os.path.join(inkml_path_dossier, 'DataClasses')\r\n    os.makedirs(path_dossier_class)\r\n    shutil.copy(path_class, os.path.join(inkml_path_dossier, 'Actions.csv'))\r\n\r\n#############Route CREER Base de Donnée txt depuis inkml :##############\r\n@APP.route('/models/inkmlToTxt/<bddname>'+\r\n           '/<txt_path_dossier>')\r\ndef route_inkml_to_txt(bddname, txt_path_dossier):\r\n    \"\"\"add new path ddb and translate it to inkml\"\"\"\r\n    inkml_path_dossier_tr = LISTE_PATH_BDD[bddname]\r\n    txt_path_dossier_tr = \"\"\r\n    for char in txt_path_dossier.split(','):\r\n        txt_path_dossier_tr += chr(int(char))\r\n    path_class_tr = os.path.join(inkml_path_dossier_tr, \"Actions.csv\")\r\n    liste_inkml = rechercher_fichier_inkml(inkml_path_dossier_tr)\r\n    write_labels(liste_inkml, txt_path_dossier_tr, path_class_tr)\r\n    write_data(liste_inkml, txt_path_dossier_tr)\r\n    copy_file_tabclass_to_txt(inkml_path_dossier_tr, path_class_tr)\r\n    return json.dumps(\"worked\")\r\n\r\n#############Fonctions CREER Base de Donnée txt depuis inkml :##############\r\ndef rechercher_fichier_inkml(inkml_path_dossier):\r\n    \"\"\"On ajoute les fichiers de présent à ce path BDD.\"\"\"\r\n    # pylint: disable-msg=global-statement\r\n    p_1 = re.compile(r'.*[.](?=inkml$)[^.]*$')\r\n    liste_fichier_in = {}\r\n    for path, _, files in walk(inkml_path_dossier):\r\n        for filename in files:\r\n            if p_1.match(filename):\r\n                liste_fichier_in[filename] = path +'/'+filename\r\n    return liste_fichier_in\r\n\r\ndef write_labels(liste_inkml, path_txt, path_class):\r\n    \"\"\"ajout des annotations au fichier labeltxt\"\"\"\r\n    dictclass = {}\r\n    with open(path_class) as fileclass:\r\n        for line in fileclass:\r\n            tabtemp = line.replace('\\n', '').split(';')\r\n            dictclass[tabtemp[1]] = tabtemp[0]\r\n    for key in liste_inkml:\r\n        annotations = {}\r\n        nb_annotation = 0\r\n        file = liste_inkml[key]\r\n        for child in ET.parse(file).getroot():\r\n            if child.tag == \"{http://www.w3.org/2003/InkML}unit\":\r\n                for children in child:\r\n                    if (children.tag == \"{http://www.w3.org/2003/InkML}annotationXML\" and\r\n                            children.attrib == {'type': 'actions'}):\r\n                        action = {}\r\n                        nb_annotation += 1\r\n                        for children2 in children:\r\n                            action[children2.attrib['type']] = children2.text\r\n                        annotations[nb_annotation] = action\r\n            elif child.tag == \"{http://www.w3.org/2003/InkML}traceGroup\":\r\n                break\r\n        filename = os.path.join(path_txt, \"Label\",\r\n                                os.path.splitext(os.path.basename(file))[0] + \"_label.txt\")\r\n        os.makedirs(os.path.dirname(filename), exist_ok=True)\r\n        with open(filename, \"w\") as flabel:\r\n            if len(annotations) > 0:\r\n                for id_elem in annotations:\r\n                    line = \"\"\r\n                    line += dictclass[annotations[id_elem][\"type\"]]\r\n                    line += \",\"\r\n                    line += annotations[id_elem][\"start\"]\r\n                    line += \",\"\r\n                    line += annotations[id_elem][\"end\"]\r\n                    flabel.write(line + \"\\n\")\r\n            flabel.close()\r\n\r\ndef write_data(liste_inkml, path_txt):\r\n    \"\"\"ajout des donnees au fichier datatxt\"\"\"\r\n    for key in liste_inkml:\r\n        file = liste_inkml[key]\r\n        nb_articulations = 0\r\n        donnees = {}\r\n        string = \"\"\r\n        for child in ET.parse(file).getroot():\r\n            if child.tag == \"{http://www.w3.org/2003/InkML}traceGroup\":\r\n                for children in child:\r\n                    if children.tag == \"{http://www.w3.org/2003/InkML}trace\":\r\n                        dict_final = []\r\n                        dict_1 = children.text.split(\", \")\r\n                        for point in dict_1:\r\n                            tab_2 = point.split(\" \")\r\n                            dict_final.append(tab_2)\r\n                        donnees[nb_articulations] = dict_final\r\n                        nb_articulations += 1\r\n        filename = os.path.join(path_txt, \"Data\",\r\n                                os.path.splitext(os.path.basename(file))[0] + \".txt\")\r\n        os.makedirs(os.path.dirname(filename), exist_ok=True)\r\n        with open(filename, \"w\") as fdata:\r\n            for id_elem in range(len(donnees[0])):\r\n                string = \"\"\r\n                for articulation in donnees:\r\n                    ## -1 sur len car on ne veut pas lire le timestamp\r\n                    for point in range(len(donnees[articulation][id_elem]) - 1):\r\n                        string += donnees[articulation][id_elem][point] + \" \"\r\n                fdata.write(string + \"\\n\")\r\n            fdata.close()\r\ndef copy_file_tabclass_to_txt(inkml_path_dossier, txt_path_dossier):\r\n    \"\"\"copier le fichier Actions.csv vers txt\"\"\"\r\n    path_tabclass_class = os.path.join(inkml_path_dossier, 'Actions.csv')\r\n    print(path_tabclass_class)\r\n    shutil.copy(path_tabclass_class, txt_path_dossier)\r\n\r\n########### MAIN ########################\r\n\r\nif __name__ == \"__main__\":\r\n    get_last_config()\r\n    delete_eval()\r\n    start_wandb_v2()\r\n    APP.run(host='0.0.0.0')\r\n    save_config()\r\n\r\n\r\n#    F = open(\"donneeSample.txt\", \"w\")\r\n#    F.write(str(get_donnee(\"Sample00001_data.inkml\", \"BDD_chalearn_inkml\")))\r\n#    F.close()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r3g-flask/server.py b/../r3g-flask/server.py
--- a/../r3g-flask/server.py	(revision adf5e1f05dcd87755072481aab9e7204e3a4f5a7)
+++ b/../r3g-flask/server.py	(date 1619954425037)
@@ -40,6 +40,7 @@
 LISTE_PATH_BDD = {}
 LISTE_FICHIER_INKML = {}
 LISTE_GESTE_BDD = {}
+Liste_GESTE_BDD_ACTION = {}
 METADONNEE = {}
 UPLOAD_FOLDER = './Upload'
 ALLOWED_EXTENSIONS = {'txt', 'csv'}
